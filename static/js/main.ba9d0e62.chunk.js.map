{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Game","props","_this","Object","classCallCheck","this","_super","call","tuningChange","event","target","value","split","tunedNote","newTuning","state","tuning","concat","setState","stringNumberChange","newWireNumber","parseInt","wireNumber","fretNumberChange","newFretNumber","fretNumber","activeWiresChange","newActiveWires","activeWires","className","checked","timeRemainingChange","newTimeRemaining","timeRemaining","currentQuestionChange","question","currentQuestion","timeRemainingSet","time","currentGameModeSet","mode","currentGameMode","scoreboardSet","scoreboard","updateScoreLocalstorage","JSON","parse","localStorage","getItem","timePass","asyncToGenerator","regenerator_default","a","mark","_callee","totalTime","optionNodes","inGameNodes","i","wrap","_context","prev","next","console","log","disableNodes","document","querySelector","querySelectorAll","sleep","length","classList","remove","enableNodes","saveScore","resetScore","orderScores","stop","ms","Promise","resolve","setTimeout","checkAnswer","contains","getAttribute","winScore","loseScore","activeFrets","randomFret","Math","floor","random","add","selectQuestionFret","newScore","currentScore","option","score","scoreLocalExists","getScoreLocal","push","sort","scoreSorter","stringify","setItem","setScoreLocal","innerHTML","dismissPrompt","react_default","createElement","class","onClick","renderBoard","renderOptions","renderScores","App_Board","numberOfFrets","numberOfWires","currentTuning","App_Options","App_Scores","React","Component","Board","_this2","_super2","wireTuning","activeToggle","fretNodes","_this3","visibilityClass","notesUsed","calculateNote","map","note","wires","renderWire","Fragment","_this4","selectNoteButtons","noteCircle","generateSelectNoteButtons","Options","App_TuningSelector","App_StringNumberSelector","App_FretNumberSelector","App_GameStartButtons","App_TimeSelector","TuningSelector","_this5","allNotes","notes","totalDropdowns","elements","index","selected","onChange","defaultValue","type","defaultChecked","generateTuningDropdowns","StringNumberSelector","min","max","FretNumberSelector","GameStartButtons","_this6","_super7","selectQuestionFretStart","bind","assertThisInitialized","selectNoteStart","activeButtons","TimeSelector","Scores","arrayinfo","renderScore","scoreArray","getScores","initialNote","arguments","undefined","stepNumber","noteIndex","toUpperCase","indexOf","err","findNote","nodes","setAttribute","removeAttribute","noteScore","questionFretScore","score1","score2","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAKMA,iEACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAI,EAAAC,KAAAF,KAAMJ,IAiFRO,aAAe,SAAAC,GACb,IAAIC,EAASD,EAAMC,OAAOC,MAAMC,MAAM,KAAK,GACvCC,EAAYJ,EAAMC,OAAOC,MAAMC,MAAM,KAAK,GAC1CE,EAAYZ,EAAKa,MAAMC,OAAOC,SAClCH,EAAUJ,GAAUG,EACpBX,EAAKgB,SAAS,CACVF,OAASF,KAxFIZ,EA4FnBiB,mBAAqB,SAAAV,GACnB,IAAIW,EAAgBC,SAASZ,EAAMC,OAAOC,OAC1CT,EAAKgB,SAAS,CACZI,WAAaF,KA/FElB,EAkGnBqB,iBAAmB,SAAAd,GACjB,IAAIe,EAAgBH,SAASZ,EAAMC,OAAOC,OAC1CT,EAAKgB,SAAS,CACZO,WAAaD,KArGEtB,EAwGnBwB,kBAAoB,SAAAjB,GAClB,IAAIkB,EAAiBzB,EAAKa,MAAMa,YAAYX,SAC5CU,EAAelB,EAAMC,OAAOmB,WAAapB,EAAMC,OAAOoB,QACtD5B,EAAKgB,SAAS,CACZU,YAAcD,KA5GCzB,EAgHnB6B,oBAAsB,SAAAtB,GACpB,IAAIuB,EAAmBX,SAASZ,EAAMC,OAAOC,OAC7CT,EAAKgB,SAAS,CACZe,cAAgBD,KAnHD9B,EAsHnBgC,sBAAwB,SAACC,GACvBjC,EAAKgB,SAAS,CACZkB,gBAAkBD,KAxHHjC,EA4HnBmC,iBAAmB,SAACC,GAClBpC,EAAKgB,SAAS,CACZe,cAAgBK,KA9HDpC,EAkInBqC,mBAAqB,SAACC,GACpBtC,EAAKgB,SAAS,CACZuB,gBAAkBD,KApIHtC,EAuInBwC,cAAgB,SAACC,GACfzC,EAAKgB,SAAS,CACZyB,WAAaA,KAzIEzC,EA6InB0C,wBAA0B,WACxB,IAAID,EAAa,GACjBA,EAAW,GAAKE,KAAKC,MAAMC,aAAaC,QAAQ,SAChDL,EAAW,GAAKE,KAAKC,MAAMC,aAAaC,QAAQ,iBAChD9C,EAAKwC,cAAcC,IAjJFzC,EAoJnB+C,SApJmB9C,OAAA+C,EAAA,EAAA/C,CAAAgD,EAAAC,EAAAC,KAoJR,SAAAC,IAAA,IAAAC,EAAAC,EAAA/B,EAAAgC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACLP,EAAYrD,EAAKa,MAAMkB,cAC3B8B,QAAQC,IAAI,cAEZC,EADIT,EAAcU,SAASC,cAAc,YAAYC,iBAAiB,kBAH7D,YAKHlE,EAAKa,MAAMkB,cAAgB,GALxB,CAAA2B,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAMD5D,EAAKmE,MAAM,KANV,OAOPnE,EAAKmC,iBAAiBnC,EAAKa,MAAMkB,cAAc,GAC/C8B,QAAQC,IAAI,aARLJ,EAAAE,KAAA,gBAeP,IALAC,QAAQC,IAAI,YACRvC,EAAayC,SAASE,iBAAiB,WAAWE,OACtDP,QAAQC,IAAIvC,GACZyC,SAASC,cAAc,iBAAiBI,UAAUC,OAAO,gBACrDf,EAAcS,SAASE,iBAAiB,WACnCV,EAAE,EAAEA,EAAED,EAAYa,OAAOZ,IAChCD,EAAYC,GAAGa,UAAUC,OAAO,UAElCC,EAAYjB,GACZtD,EAAKwE,UAAUxE,EAAKa,MAAM0B,gBAAiBhB,EAAW8B,GACtDrD,EAAKqC,mBAAmB,MACxBrC,EAAKmC,iBAAiB6B,SAASC,cAAc,iBAAiBxD,OAC9DT,EAAKyE,aACLC,IAvBO,yBAAAhB,EAAAiB,SAAAvB,MApJQpD,EA8KnBmE,MAAQ,SAACS,GACP,OAAO,IAAIC,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MA/KjC5E,EAkLnBgF,YAAc,SAAAzE,GACZ,GAAKA,EAAMC,OAAO6D,UAAUY,SAAS,UAArC,CAIA,GAAkC,QAA9BjF,EAAKa,MAAM0B,gBACb,IAAIN,EAAWjC,EAAKa,MAAMqB,gBAAgBxB,MAAM,KAAK,QAEjDuB,EAAWjC,EAAKa,MAAMqB,gBAGzB3B,EAAMC,OAAO0E,aAAa,SAAWjD,EACvCjC,EAAKmF,WAEJnF,EAAKoF,YAGPpB,SAASC,cAAc,iBAAiBI,UAAUC,OAAO,gBACzD,IAAIe,EAAcrB,SAASC,cAAc,iBAAiBC,iBAAiB,6BACvEoB,EAAaD,EAAYE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAYjB,SACpEkB,EAAWjB,UAAUqB,IAAI,gBACzB1F,EAAKgC,sBAAsBsD,EAAWJ,aAAa,WAvMlClF,EA0MnB2F,mBAAqB,WACnB,IAAIN,EAAcrB,SAASC,cAAc,iBAAiBC,iBAAiB,6BAEnEoB,EAAaD,EAAYE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAYjB,SACpEkB,EAAWjB,UAAUqB,IAAI,gBACzB1F,EAAKgC,sBAAsBsD,EAAWJ,aAAa,UA/MtClF,EAkNnBmF,SAAW,WACT,IAAIS,EAAW5F,EAAKa,MAAMgF,aAAe,IACzC7F,EAAKgB,SAAS,CACZ6E,aAAeD,KArNA5F,EAwNnBoF,UAAY,WACV,IAAIQ,EAAW5F,EAAKa,MAAMgF,aAAe,IACzC7F,EAAKgB,SAAS,CACZ6E,aAAeD,KA3NA5F,EA8NnByE,WAAa,WACXzE,EAAKgB,SAAS,CACZ6E,aAAe,KAhOA7F,EAmOnBwE,UAAY,SAAClC,EAAMf,EAAY8B,IAsTjC,SAAuByC,EAAOC,EAAM3D,EAAKb,GACvCyE,IACA5D,EAAOjB,SAASiB,GAChB,IAAIK,EAAawD,EAAcH,GAC/BrD,EAAWyD,KAAK,CAACH,EAAM3D,EAAKb,IAC5BkB,EAAW0D,KAAKC,GAChB3D,EAAaE,KAAK0D,UAAU5D,GAC5BI,aAAayD,QAAQR,EAAOrD,IA1T1B8D,CAAcjE,EAFDnB,SAAS6C,SAASC,cAAc,UAAUuC,YAAc,EAE1CjF,EAD3B8B,EAAYlC,SAASkC,IAErBrD,EAAK0C,2BArOL1C,EAAKa,MAAM,CACTC,OAAO,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KAC5BM,WAAW,EACXG,WAAW,GACXQ,cAAgB,EAChBL,YAAY,EAAC,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACrDQ,gBAAiB,KACjB2D,aAAc,KACdtD,gBAAiB,KACjBE,WAAY,GACZgE,cAAe,WACbzC,SAASC,cAAc,mBAAmBI,UAAUqB,IAAI,qBAb3C1F,4CAmBnB,WACE,OACI0G,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,QACTF,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,iBAAiBC,QAAS1G,KAAKU,MAAM4F,eAAeC,EAAAxD,EAAAyD,cAAA,KAAGC,MAAM,cAAT,8CAAoEF,EAAAxD,EAAAyD,cAAA,KAAGC,MAAM,cAAT,mBACjIF,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,SACTF,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,YACTF,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,YAAX,sBAA0CzG,KAAKU,MAAMqB,iBACrDwE,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,SAAX,UAA2BzG,KAAKU,MAAMgF,cACtCa,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,iBAAX,SAAkCzG,KAAKU,MAAMkB,gBAE5C5B,KAAK2G,eAEVJ,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,WACRzG,KAAK4G,iBAERL,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,UACRzG,KAAK6G,4CAMlB,WACE,OAAON,EAAAxD,EAAAyD,cAACM,EAAD,CACLC,cAAiB/G,KAAKU,MAAMU,WAC5B4F,cAAiBhH,KAAKU,MAAMO,WAC5BgG,cAAiBjH,KAAKU,MAAMC,OAC5BY,YAAevB,KAAKU,MAAMa,YAC1BsD,YAAe7E,KAAK6E,2CAIxB,WACE,OAAO0B,EAAAxD,EAAAyD,cAACU,EAAD,CACLjG,WAAYjB,KAAKU,MAAMO,WACvBgG,cAAiBjH,KAAKU,MAAMC,OAC5BR,aAAcH,KAAKG,aACnBW,mBAAoBd,KAAKc,mBACzBI,iBAAkBlB,KAAKkB,iBACvBK,YAAevB,KAAKU,MAAMa,YAC1BF,kBAAqBrB,KAAKqB,kBAC1BQ,sBAAyB7B,KAAK6B,sBAC9BmD,SAAYhF,KAAKgF,SACjBC,UAAajF,KAAKiF,UAClBO,mBAAsBxF,KAAKwF,mBAC3BzD,gBAAmB/B,KAAKU,MAAMqB,gBAC9BL,oBAAuB1B,KAAK0B,oBAC5BkB,SAAY5C,KAAK4C,SACjBV,mBAAsBlC,KAAKkC,iDAI/B,WACE,OAAOqE,EAAAxD,EAAAyD,cAACW,EAAD,CACP9E,cAAiBrC,KAAKqC,cACtBC,WAActC,KAAKU,MAAM4B,WACzBC,wBAA2BvC,KAAKuC,iCA5EjB6E,IAAMC,YA4OnBC,oDACJ,SAAAA,EAAY1H,GAAM,IAAA2H,EAAA,OAAAzH,OAAAC,EAAA,EAAAD,CAAAE,KAAAsH,IAChBC,EAAAC,EAAAtH,KAAAF,KAAMJ,IACDiF,YAAc0C,EAAK3H,MAAMiF,YAFd0C,gDAKlB,SAAWR,EAAeU,EAAYC,EAAczG,GAKlD,IAL6D,IAGzD0G,EAHyDC,EAAA5H,KACzD6H,EAAkBH,EAAe,UAAY,SAC7CI,EAAY,GAGPzE,EAAE,EAAEA,EAAE0D,EAAc1D,IAC3ByE,EAAUzE,GAAK0E,EAAcN,EAAWpE,GAK1C,OAHAsE,EAAYG,EAAUE,IAAI,SAACC,GAAD,OACxB1B,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,OAAOwB,KAAMA,EAAK,IAAIhH,EAAYyF,QAASkB,EAAK/C,aAAcoD,KAGzE1B,EAAAxD,EAAAyD,cAAA,OAAKhF,UAAa,QAASqG,GACxBF,8BAKP,SAAYZ,EAAeC,EAAerG,GAExC,IADA,IAAIuH,EAAQ,GACH7E,EAAE,EAAEA,EAAE2D,EAAc3D,IAC3B6E,EAAM7E,GAAKrD,KAAKmI,WAAWpB,EAAcpG,EAAO0C,GAAGrD,KAAKJ,MAAM2B,YAAY8B,GAAGA,GAE/E,OACCkD,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KAAGF,4CAIN,WAA2B,IAAAG,EAAArI,KACrBsI,EAAoBC,EAAWP,IAAI,SAACC,GAAD,OACvC1B,EAAAxD,EAAAyD,cAAA,UAAQC,MAAO,oBAAoBwB,KAAMA,EAAMvB,QAAS2B,EAAKxD,aAAcoD,KAE3E,OACE1B,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,iBACR6B,yBAKP,WACE,OACE/B,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KACA7B,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,aACTzG,KAAK2G,YAAY3G,KAAKJ,MAAMmH,cAAe/G,KAAKJ,MAAMoH,cAAchH,KAAKJ,MAAMqH,gBAEhFjH,KAAKwI,oCAnDQpB,IAAMC,WAyDpBoB,8JACJ,WACE,OACElC,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KACE7B,EAAAxD,EAAAyD,cAACkC,EAAD,CACEzH,WAAcjB,KAAKJ,MAAMqB,WACzBd,aAAgBH,KAAKJ,MAAMO,aAC3B8G,cAAiBjH,KAAKJ,MAAMqH,cAC5B1F,YAAevB,KAAKJ,MAAM2B,YAC1BF,kBAAqBrB,KAAKJ,MAAMyB,oBAElCkF,EAAAxD,EAAAyD,cAACmC,EAAD,CACE7H,mBAAsBd,KAAKJ,MAAMkB,qBAEnCyF,EAAAxD,EAAAyD,cAACoC,EAAD,CACE1H,iBAAoBlB,KAAKJ,MAAMsB,mBAEjCqF,EAAAxD,EAAAyD,cAACqC,EAAD,CACEhH,sBAAyB7B,KAAKJ,MAAMiC,sBACpCE,gBAAmB/B,KAAKJ,MAAMmC,gBAC9BiD,SAAYhF,KAAKJ,MAAMoF,SACvBC,UAAajF,KAAKJ,MAAMqF,UACxBrC,SAAY5C,KAAKJ,MAAMgD,SACvB4C,mBAAsBxF,KAAKJ,MAAM4F,mBACjCtD,mBAAsBlC,KAAKJ,MAAMsC,qBAEnCqE,EAAAxD,EAAAyD,cAACsC,EAAD,CACEpH,oBAAuB1B,KAAKJ,MAAM8B,8BA3BtB0F,IAAMC,WAkCtB0B,+KAEF,SAAwB9H,GAEtB,IAFiC,IAAA+H,EAAAhJ,KAC7BiJ,EAAW,GACP5F,EAAE,EAAEA,EAAEpC,EAAWoC,IACvB4F,EAAS5F,GAAKkF,EAAWP,IAAI,SAACkB,GAAD,OAC5B3C,EAAAxD,EAAAyD,cAAA,UAAQlG,MAAS+C,EAAE,IAAI6F,GAAQA,KAGlC,IAAIC,EAAiBF,EAASjB,IAAI,SAACoB,EAASC,GAAV,OAChC9C,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KACA7B,EAAAxD,EAAAyD,cAAA,UAAQhF,UAAWwH,EAAKpJ,MAAM2B,YAAY8H,GAAS,UAAY,SAAU/I,MAAO0I,EAAKM,SAAUC,SAAUP,EAAKpJ,MAAMO,aAAcqJ,aAAcH,EAAM,IAAIL,EAAKpJ,MAAMqH,cAAcoC,IAChLD,GAEH7C,EAAAxD,EAAAyD,cAAA,SAAOiD,KAAK,WAAWC,eAAgBV,EAAKpJ,MAAM2B,YAAY8H,GAAQ7H,UAAW6H,EAAOE,SAAUP,EAAKpJ,MAAMyB,uBAG/G,OACEkF,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,iBACR0C,yBAKP,WACE,OACE5C,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KACGpI,KAAK2J,wBAAwB3J,KAAKJ,MAAMqB,oBA3BtBmG,IAAMC,WAiC7BuC,8JAEJ,WACE,OACErD,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KACA7B,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,wBACTF,EAAAxD,EAAAyD,cAAA,SAAOiD,KAAK,SAASI,IAAI,IAAIC,IAAI,IAAIN,aAAa,IAAID,SAAUvJ,KAAKJ,MAAMkB,qBAC3EyF,EAAAxD,EAAAyD,cAAA,sCAP2BY,IAAMC,WAcnC0C,8JAEJ,WACE,OACExD,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KACA7B,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,sBACTF,EAAAxD,EAAAyD,cAAA,SAAOiD,KAAK,SAASI,IAAI,IAAIC,IAAI,KAAKN,aAAa,KAAKD,SAAUvJ,KAAKJ,MAAMsB,mBAC7EqF,EAAAxD,EAAAyD,cAAA,oCAPyBY,IAAMC,WAcjC2C,oDACJ,SAAAA,EAAYpK,GAAM,IAAAqK,EAAA,OAAAnK,OAAAC,EAAA,EAAAD,CAAAE,KAAAgK,IAChBC,EAAAC,EAAAhK,KAAAF,KAAMJ,IACDuK,wBAA0BF,EAAKE,wBAAwBC,KAA7BtK,OAAAuK,EAAA,EAAAvK,CAAAmK,IAC/BA,EAAKK,gBAAkBL,EAAKK,gBAAgBF,KAArBtK,OAAAuK,EAAA,EAAAvK,CAAAmK,IACvBA,EAAKrH,SAAWqH,EAAKrK,MAAMgD,SAASwH,KAApBtK,OAAAuK,EAAA,EAAAvK,CAAAmK,IAChBA,EAAKzE,mBAAqByE,EAAKrK,MAAM4F,mBACrCyE,EAAK/H,mBAAqB+H,EAAKrK,MAAMsC,mBANrB+H,6DASlB,WACEjK,KAAKkC,mBAAmB,gBACxBlC,KAAKwF,qBACLxF,KAAK4C,WAEL,IADA,IAAIsC,EAAcrB,SAASC,cAAc,iBAAiBC,iBAAiB,6BAClEV,EAAE,EAAEA,EAAE6B,EAAYjB,OAAOZ,IAChC6B,EAAY7B,GAAG7B,WAAa,yCAIhC,WACExB,KAAKkC,mBAAmB,QACxBlC,KAAKwF,qBACLxF,KAAK4C,WACL,IAAI2H,EAAgB1G,SAASE,iBAAiB,4BAC9CL,QAAQC,IAAI4G,GACZ,IAAI,IAAIlH,EAAE,EAAEA,EAAEkH,EAActG,OAAOZ,IACjCkH,EAAclH,GAAG7B,WAAY,gCAcjC,WACE,OACE+E,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KACA7B,EAAAxD,EAAAyD,cAAA,SAAOiD,KAAK,SAASnJ,MAAM,gBAAgBmG,MAAM,qCAAqCC,QAAS1G,KAAKmK,0BACpG5D,EAAAxD,EAAAyD,cAAA,SAAOiD,KAAK,SAASnJ,MAAM,OAAOmG,MAAM,6BAA6BC,QAAS1G,KAAKsK,0BA7C1DlD,IAAMC,WAmD/BmD,8JACJ,WACE,OACEjE,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KAAE7B,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,mBACbF,EAAAxD,EAAAyD,cAAA,UAAQC,MAAM,eAAe8C,SAAUvJ,KAAKJ,MAAM8B,qBAChD6E,EAAAxD,EAAAyD,cAAA,UAAQlG,MAAO,KAAf,KACAiG,EAAAxD,EAAAyD,cAAA,UAAQlG,MAAM,MAAd,MACAiG,EAAAxD,EAAAyD,cAAA,UAAQlG,MAAM,MAAd,MACAiG,EAAAxD,EAAAyD,cAAA,UAAQlG,MAAM,KAAKgJ,UAAQ,GAA3B,MACA/C,EAAAxD,EAAAyD,cAAA,UAAQlG,MAAM,MAAd,MACAiG,EAAAxD,EAAAyD,cAAA,UAAQlG,MAAM,OAAd,QAEFiG,EAAAxD,EAAAyD,cAAA,6BAZqBY,IAAMC,WAoB3BoD,iKAEJ,SAAUC,GACR,MAAyB,qBAAdA,GAA0C,MAAbA,EAEpCnE,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KACGpI,KAAK2K,YAAYD,EAAU,IAC3B1K,KAAK2K,YAAYD,EAAU,IAC3B1K,KAAK2K,YAAYD,EAAU,KAIzBnE,EAAAxD,EAAAyD,cAAA,kDAIX,SAAYoE,GACV,MAAwB,qBAAbA,EAEPrE,EAAAxD,EAAAyD,cAAA,WAAMoE,EAAW,GAAjB,gBAAkCA,EAAW,GAA7C,aAA2DA,EAAW,GAAtE,YAIArE,EAAAxD,EAAAyD,cAAA,qDAKN,WACExG,KAAKJ,MAAM2C,gDAGb,WACE,OACEgE,EAAAxD,EAAAyD,cAAAD,EAAAxD,EAAAqF,SAAA,KACE7B,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,WACTF,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,kBAAiBF,EAAAxD,EAAAyD,cAAA,QAAMC,MAAM,eAAZ,kBAAgDzG,KAAK6K,UAAU7K,KAAKJ,MAAM0C,WAAW,KACjHiE,EAAAxD,EAAAyD,cAAA,OAAKC,MAAM,0BAAyBF,EAAAxD,EAAAyD,cAAA,QAAMC,MAAM,eAAZ,0BAAwDzG,KAAK6K,UAAU7K,KAAKJ,MAAM0C,WAAW,cArCtH8E,IAAMC,WA2CrBkB,EAAa,CAAC,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,MAE/E,SAASR,IAA0C,IAA5B+C,EAA4BC,UAAA9G,OAAA,QAAA+G,IAAAD,UAAA,GAAAA,UAAA,GAAhB,IAAKE,EAAWF,UAAA9G,OAAA,EAAA8G,UAAA,QAAAC,EAI/C,IADAC,GAOJ,SAAkBhD,GAGd,IAAIiD,EADJjD,EAAOA,EAAKkD,cAEZ,IACID,EAAY3C,EAAW6C,QAAQnD,GAClC,MAAMoD,GACH3H,QAAQC,IAAI,4BAEhB,OAAOuH,EAhBmBI,CAD1BR,EAAcA,EAAYK,eAEpBF,EAAW,IACbA,GAAsB,GAE1B,OAAO1C,EAAW0C,GAetB,SAASrH,EAAa2H,GACpB,IAAI,IAAIlI,EAAE,EAAEA,EAAEkI,EAAMtH,OAAOZ,IACzBkI,EAAMlI,GAAGmI,aAAa,WAAY,YAItC,SAASpH,EAAYmH,GACnB,IAAI,IAAIlI,EAAE,EAAEA,EAAEkI,EAAMtH,OAAOZ,IACzBkI,EAAMlI,GAAGoI,gBAAgB,YAc7B,SAAS3F,EAAcH,GAErB,OADAE,IACOrD,KAAKC,MAAMC,aAAaC,QAAQgD,IAGzC,SAASpB,IACPb,QAAQC,IAAI,aACZ,IAAI+H,EAAY5F,EAAc,QAC1B6F,EAAoB7F,EAAc,gBACtC4F,EAAU1F,KAAKC,GACf0F,EAAkB3F,KAAKC,GACvByF,EAAYlJ,KAAK0D,UAAUwF,GAC3BC,EAAoBnJ,KAAK0D,UAAUyF,GACnCjJ,aAAayD,QAAQ,OAAOuF,GAC5BhJ,aAAayD,QAAQ,eAAgBwF,GAGvC,SAAS1F,EAAY2F,EAAQC,GAG3B,OAFAD,EAAuB,IAAZA,EAAO,GAAWA,EAAO,GAAIA,EAAO,KAC/CC,EAAuB,IAAZA,EAAO,GAAWA,EAAO,GAAIA,EAAO,KAErC,EACAD,EAAOC,EACR,EAEA,EAIX,SAAShG,IACFrD,KAAKC,MAAMC,aAAaC,QAAQ,kBACnCD,aAAayD,QAAQ,eAAe3D,KAAK0D,UAAU,KAEhD1D,KAAKC,MAAMC,aAAaC,QAAQ,UACnCD,aAAayD,QAAQ,OAAO3D,KAAK0D,UAAU,KAIhCvG,QCnkBKmM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7F,EAAAxD,EAAAyD,cAAC6F,EAAD,MAASxI,SAASyI,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba9d0e62.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport './style.css'\r\n\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      tuning:[\"E\",\"B\",\"G\",\"D\",\"A\",\"E\"],\r\n      wireNumber:6,\r\n      fretNumber:12,\r\n      timeRemaining : 2,\r\n      activeWires:[true,true,true,true,true,true,true,true,true],\r\n      currentQuestion: null,\r\n      currentScore: null,\r\n      currentGameMode: null,\r\n      scoreboard: [],\r\n      dismissPrompt: ()=>{\r\n        document.querySelector('.portraitPrompt').classList.add('dismissedPrompt');\r\n      },\r\n      };\r\n\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div class=\"game\">\r\n          <div class=\"portraitPrompt\" onClick={this.state.dismissPrompt}><p class=\"promptText\">Switch to portrait for a better experience</p><p class=\"promptText\">Tap to dismiss</p></div>\r\n            <div class=\"board\">\r\n              <div class=\"gameInfo\">\r\n                <div class=\"question\">Point to the fret: {this.state.currentQuestion}</div>\r\n                <div class=\"score\">SCORE: {this.state.currentScore}</div>\r\n                <div class=\"timeRemaining\">TIME: {this.state.timeRemaining}</div>\r\n              </div>\r\n                {this.renderBoard()}\r\n            </div>\r\n            <div class=\"options\">\r\n              {this.renderOptions()}\r\n            </div>\r\n            <div class=\"scores\">\r\n              {this.renderScores()}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  renderBoard(){\r\n    return <Board\r\n      numberOfFrets = {this.state.fretNumber}\r\n      numberOfWires = {this.state.wireNumber}\r\n      currentTuning = {this.state.tuning}\r\n      activeWires = {this.state.activeWires}\r\n      checkAnswer = {this.checkAnswer}\r\n    />\r\n  }\r\n\r\n  renderOptions(){\r\n    return <Options\r\n      wireNumber={this.state.wireNumber} \r\n      currentTuning = {this.state.tuning}\r\n      tuningChange={this.tuningChange}\r\n      stringNumberChange={this.stringNumberChange}\r\n      fretNumberChange={this.fretNumberChange}\r\n      activeWires = {this.state.activeWires}\r\n      activeWiresChange = {this.activeWiresChange}\r\n      currentQuestionChange = {this.currentQuestionChange}\r\n      winScore = {this.winScore}\r\n      loseScore = {this.loseScore}\r\n      selectQuestionFret = {this.selectQuestionFret}\r\n      currentQuestion = {this.state.currentQuestion}\r\n      timeRemainingChange = {this.timeRemainingChange}\r\n      timePass = {this.timePass}\r\n      currentGameModeSet = {this.currentGameModeSet}\r\n    />\r\n  }\r\n\r\n  renderScores(){\r\n    return <Scores \r\n    scoreboardSet = {this.scoreboardSet}\r\n    scoreboard = {this.state.scoreboard}\r\n    updateScoreLocalstorage = {this.updateScoreLocalstorage}\r\n    />\r\n  }\r\n  /* React.Component doesn't auto bind methods to itself. You need to bind them yourself */\r\n  /* Option A: Bind them in the constructor, as in this.tuningChange = this.tuningChange.bind(this); in the constructor of this class*/\r\n  /* Option B: when passed as a prop, pass it as this.tuningChange.bind(this) */\r\n  /* Option C: What is displayed here, define the function as an event that executes a function ¿?*/\r\n  tuningChange = event => {\r\n    var target = event.target.value.split(\",\")[0];\r\n    var tunedNote = event.target.value.split(\",\")[1];\r\n    var newTuning = this.state.tuning.concat();\r\n    newTuning[target] = tunedNote;\r\n    this.setState({\r\n        tuning : newTuning\r\n    })\r\n  }\r\n\r\n  stringNumberChange = event => {\r\n    var newWireNumber = parseInt(event.target.value);\r\n    this.setState({\r\n      wireNumber : newWireNumber\r\n    })\r\n  }\r\n  fretNumberChange = event => {\r\n    var newFretNumber = parseInt(event.target.value);\r\n    this.setState({\r\n      fretNumber : newFretNumber\r\n    })\r\n  }\r\n  activeWiresChange = event => {\r\n    var newActiveWires = this.state.activeWires.concat();\r\n    newActiveWires[event.target.className] = event.target.checked;\r\n    this.setState({\r\n      activeWires : newActiveWires\r\n    })\r\n  }\r\n  \r\n  timeRemainingChange = event =>{\r\n    var newTimeRemaining = parseInt(event.target.value);\r\n    this.setState({\r\n      timeRemaining : newTimeRemaining\r\n    })\r\n  }\r\n  currentQuestionChange = (question) => {\r\n    this.setState({\r\n      currentQuestion : question\r\n    })\r\n  }\r\n\r\n  timeRemainingSet = (time) => {\r\n    this.setState({\r\n      timeRemaining : time\r\n    })\r\n  }\r\n  \r\n  currentGameModeSet = (mode) => {\r\n    this.setState({\r\n      currentGameMode : mode\r\n    })\r\n  }\r\n  scoreboardSet = (scoreboard) => {\r\n    this.setState({\r\n      scoreboard : scoreboard\r\n    })\r\n  }\r\n\r\n  updateScoreLocalstorage = () => {\r\n    var scoreboard = [];\r\n    scoreboard[0] = JSON.parse(localStorage.getItem(\"note\"));\r\n    scoreboard[1] = JSON.parse(localStorage.getItem(\"questionFret\"));\r\n    this.scoreboardSet(scoreboard);\r\n  }\r\n\r\n  timePass = async () => {\r\n    var totalTime = this.state.timeRemaining;\r\n    console.log(\"Game Start\");\r\n    var optionNodes = document.querySelector(\".options\").querySelectorAll(\"select, input\");\r\n    disableNodes(optionNodes);\r\n    while(this.state.timeRemaining > 0){\r\n      await this.sleep(1000);\r\n      this.timeRemainingSet(this.state.timeRemaining-1);\r\n      console.log(\"Time tick\");\r\n    }\r\n      console.log(\"Time end\");\r\n      var fretNumber = document.querySelectorAll(\".inGame\").length;\r\n      console.log(fretNumber);\r\n      document.querySelector(\".questionNode\").classList.remove(\"questionNode\");\r\n      var inGameNodes = document.querySelectorAll(\".inGame\");\r\n      for (var i=0;i<inGameNodes.length;i++){\r\n        inGameNodes[i].classList.remove(\"inGame\");\r\n      }\r\n      enableNodes(optionNodes);\r\n      this.saveScore(this.state.currentGameMode, fretNumber,totalTime);\r\n      this.currentGameModeSet(null);\r\n      this.timeRemainingSet(document.querySelector(\".timeSelector\").value);\r\n      this.resetScore();\r\n      orderScores();\r\n  }\r\n\r\n  sleep = (ms) => {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  checkAnswer = event => {\r\n    if (!event.target.classList.contains(\"inGame\")){\r\n     return\r\n    }\r\n\r\n    if (this.state.currentGameMode == \"note\"){\r\n      var question = this.state.currentQuestion.split(\" \")[0];\r\n    }else{\r\n      var question = this.state.currentQuestion;\r\n    }\r\n\r\n    if(event.target.getAttribute(\"note\") == question){\r\n     this.winScore();\r\n    }else{\r\n      this.loseScore();\r\n    }\r\n\r\n    document.querySelector(\".questionNode\").classList.remove(\"questionNode\");\r\n    var activeFrets = document.querySelector(\"div.fretBoard\").querySelectorAll(\"div.wire.visible>div.fret\");\r\n    var randomFret = activeFrets[Math.floor(Math.random() * activeFrets.length)];\r\n    randomFret.classList.add('questionNode');\r\n    this.currentQuestionChange(randomFret.getAttribute(\"note\"));\r\n  }\r\n  \r\n  selectQuestionFret = () =>{\r\n    var activeFrets = document.querySelector(\"div.fretBoard\").querySelectorAll(\"div.wire.visible>div.fret\");\r\n        //Initial question fret\r\n        var randomFret = activeFrets[Math.floor(Math.random() * activeFrets.length)];\r\n        randomFret.classList.add('questionNode');\r\n        this.currentQuestionChange(randomFret.getAttribute(\"note\"));\r\n  }\r\n\r\n  winScore = () =>{\r\n    var newScore = this.state.currentScore + 100;\r\n    this.setState({\r\n      currentScore : newScore\r\n    })\r\n  }\r\n  loseScore = () =>{\r\n    var newScore = this.state.currentScore - 100;\r\n    this.setState({\r\n      currentScore : newScore\r\n    })\r\n  }\r\n  resetScore = () =>{\r\n    this.setState({\r\n      currentScore : 0\r\n    })\r\n  }\r\n  saveScore = (mode, fretNumber, totalTime) =>{\r\n    var points = parseInt(document.querySelector(\".score\").innerHTML) || 0;\r\n    totalTime = parseInt(totalTime);\r\n    setScoreLocal(mode, points,fretNumber,totalTime);\r\n    this.updateScoreLocalstorage();\r\n  }\r\n}\r\n\r\nclass Board extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.checkAnswer = this.props.checkAnswer;\r\n  }\r\n\r\n  renderWire(numberOfFrets, wireTuning, activeToggle, wireNumber){\r\n    var visibilityClass = activeToggle ? \"visible\" : \"hidden\";\r\n    var notesUsed = [];\r\n    var fretNodes = [];\r\n\r\n    for (var i=0;i<numberOfFrets;i++){\r\n      notesUsed[i] = calculateNote(wireTuning,i);\r\n    }\r\n    fretNodes = notesUsed.map((note) =>\r\n      <div class=\"fret\" note={note+\" \"+wireNumber} onClick={this.checkAnswer}>{note}</div>\r\n    );\r\n    return(\r\n      <div className = {\"wire \"+ visibilityClass} >\r\n        {fretNodes}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderBoard(numberOfFrets, numberOfWires, tuning){\r\n    var wires = [];\r\n    for (var i=0;i<numberOfWires;i++){\r\n      wires[i] = this.renderWire(numberOfFrets,tuning[i],this.props.activeWires[i],i);\r\n    }\r\n    return(\r\n     <>{wires}</>\r\n    )\r\n  }\r\n\r\n  generateSelectNoteButtons(){\r\n    var selectNoteButtons = noteCircle.map((note) =>\r\n    <button class =\"selectNoteButtons\" note={note} onClick={this.checkAnswer}>{note}</button>\r\n      )\r\n    return(\r\n      <div class=\"selectNoteDiv\">\r\n        {selectNoteButtons}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n      <div class=\"fretBoard\">\r\n       {this.renderBoard(this.props.numberOfFrets, this.props.numberOfWires,this.props.currentTuning)}\r\n      </div>\r\n      {this.generateSelectNoteButtons()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nclass Options extends React.Component{\r\n  render(){\r\n    return (\r\n      <>\r\n        <TuningSelector\r\n          wireNumber = {this.props.wireNumber}\r\n          tuningChange = {this.props.tuningChange}\r\n          currentTuning = {this.props.currentTuning}\r\n          activeWires = {this.props.activeWires}\r\n          activeWiresChange = {this.props.activeWiresChange}\r\n        />\r\n        <StringNumberSelector\r\n          stringNumberChange = {this.props.stringNumberChange}\r\n        />\r\n        <FretNumberSelector\r\n          fretNumberChange = {this.props.fretNumberChange}\r\n        />\r\n        <GameStartButtons\r\n          currentQuestionChange = {this.props.currentQuestionChange}\r\n          currentQuestion = {this.props.currentQuestion}\r\n          winScore = {this.props.winScore}\r\n          loseScore = {this.props.loseScore}\r\n          timePass = {this.props.timePass}\r\n          selectQuestionFret = {this.props.selectQuestionFret}\r\n          currentGameModeSet = {this.props.currentGameModeSet}\r\n        />\r\n        <TimeSelector\r\n          timeRemainingChange = {this.props.timeRemainingChange}\r\n        />\r\n      </>\r\n      )\r\n  }\r\n}\r\n\r\nclass TuningSelector extends React.Component{\r\n    //Maps from the notes array to make 12 <option> nodes, then from that to make the desired amount of <select> nodes with <option> in them\r\n    generateTuningDropdowns(wireNumber){\r\n      var allNotes = [];\r\n      for(var i=0;i<wireNumber;i++){\r\n        allNotes[i] = noteCircle.map((notes)=>\r\n         <option value = {i+\",\"+notes}>{notes}</option>\r\n        )\r\n      }\r\n      var totalDropdowns = allNotes.map((elements,index)=>\r\n        <>\r\n        <select className={this.props.activeWires[index] ? \"visible\" : \"hidden\"} value={this.selected} onChange={this.props.tuningChange} defaultValue={index+\",\"+this.props.currentTuning[index]}>\r\n          {elements}\r\n        </select>\r\n        <input type=\"checkbox\" defaultChecked={this.props.activeWires[index]} className={index} onChange={this.props.activeWiresChange}></input>\r\n        </>\r\n      )\r\n      return(\r\n        <div class=\"tuningOptions\">\r\n          {totalDropdowns}\r\n        </div>\r\n      )\r\n    }\r\n\r\n    render(){\r\n      return(\r\n        <>\r\n          {this.generateTuningDropdowns(this.props.wireNumber)}\r\n        </>\r\n      )\r\n    }\r\n}\r\n\r\nclass StringNumberSelector extends React.Component{\r\n  \r\n  render(){\r\n    return(\r\n      <>\r\n      <div class=\"stringNumberSelector\">\r\n        <input type=\"number\" min=\"1\" max=\"6\" defaultValue=\"6\" onChange={this.props.stringNumberChange}/>\r\n        <span>String Number</span>\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nclass FretNumberSelector extends React.Component{\r\n  \r\n  render(){\r\n    return(\r\n      <>\r\n      <div class=\"fretNumberSelector\">\r\n        <input type=\"number\" min=\"1\" max=\"12\" defaultValue=\"12\" onChange={this.props.fretNumberChange}/>\r\n        <span>Fret Number</span>\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nclass GameStartButtons extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.selectQuestionFretStart = this.selectQuestionFretStart.bind(this);\r\n    this.selectNoteStart = this.selectNoteStart.bind(this);\r\n    this.timePass = this.props.timePass.bind(this);\r\n    this.selectQuestionFret = this.props.selectQuestionFret;\r\n    this.currentGameModeSet = this.props.currentGameModeSet;\r\n  }\r\n\r\n  selectQuestionFretStart(){//Function that actually fires from the button press\r\n    this.currentGameModeSet(\"questionFret\");\r\n    this.selectQuestionFret();\r\n    this.timePass();\r\n    var activeFrets = document.querySelector(\"div.fretBoard\").querySelectorAll(\"div.wire.visible>div.fret\");\r\n    for (var i=0;i<activeFrets.length;i++){\r\n      activeFrets[i].className += \" inGame\";\r\n    }\r\n  }\r\n\r\n  selectNoteStart(){\r\n    this.currentGameModeSet(\"note\");\r\n    this.selectQuestionFret();\r\n    this.timePass();\r\n    var activeButtons = document.querySelectorAll(\"button.selectNoteButtons\");\r\n    console.log(activeButtons);\r\n    for(var i=0;i<activeButtons.length;i++){\r\n      activeButtons[i].className +=\" inGame\";\r\n    }\r\n  }\r\n\r\n  //Two buttons, one for finding note in string, other for identifying marked note.\r\n  //Should fire two different functions ¿? Each doing its own thing, ultimately writing into Scores\r\n  //Game Start\r\n  //Option menu is locked\r\n  //Button turns into cancel ¿?\r\n  //prompt is generated (F key in wire 3, what is the note in the sixth fret of first wire?)\r\n  //Time starts running (set an option for time?)\r\n  //Note circle or fretboard becomes clickable as pertinent\r\n  //Success or failure changes score, generates another prompt\r\n  //When time runs out prompt disappears, score is logged, things return to normal\r\n  render(){\r\n    return(\r\n      <>\r\n      <input type=\"button\" value=\"Question Fret\" class=\"questionFretButton gameStartButton\" onClick={this.selectQuestionFretStart}/>\r\n      <input type=\"button\" value=\"Note\" class=\"noteButton gameStartButton\" onClick={this.selectNoteStart}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nclass TimeSelector extends React.Component{\r\n  render(){\r\n    return(\r\n      <><div class=\"timeSelectorDiv\">\r\n      <select class=\"timeSelector\" onChange={this.props.timeRemainingChange}>\r\n        <option value =\"3\">3</option>\r\n        <option value=\"30\">30</option>\r\n        <option value=\"45\">45</option>\r\n        <option value=\"60\" selected>60</option>\r\n        <option value=\"90\">90</option>\r\n        <option value=\"120\">120</option>\r\n      </select>\r\n      <span>Time</span>\r\n      </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nclass Scores extends React.Component{\r\n\r\n  getScores(arrayinfo){\r\n    if (typeof arrayinfo !== 'undefined' && arrayinfo != null){\r\n      return(\r\n        <>\r\n          {this.renderScore(arrayinfo[0])}\r\n          {this.renderScore(arrayinfo[1])}\r\n          {this.renderScore(arrayinfo[2])}\r\n        </>\r\n      ) \r\n    }else{\r\n      return(<div>No score</div>)\r\n    }\r\n  }\r\n\r\n  renderScore(scoreArray){\r\n    if (typeof scoreArray!=='undefined'){\r\n      return(\r\n        <div>{scoreArray[0]} points with {scoreArray[1]} frets in {scoreArray[2]} seconds</div>\r\n      )\r\n    }else{\r\n      return(\r\n        <div>Empty</div>\r\n      )\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.updateScoreLocalstorage()\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n        <div class=\"ranking\">\r\n          <div class=\"noteScoreBoard\"><span class=\"scoreHeader\">noteScoreBoard</span>{this.getScores(this.props.scoreboard[0])}</div>\r\n          <div class=\"questionFretScoreBoard\"><span class=\"scoreHeader\">questionFretScoreBoard</span>{this.getScores(this.props.scoreboard[1])}</div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\nconst noteCircle = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"];\r\n\r\nfunction calculateNote(initialNote=\"A\", stepNumber){\r\n    //Given a initial note and a number of steps, it returns the note X steps from the initial note.\r\n    initialNote = initialNote.toUpperCase();\r\n    stepNumber = stepNumber + findNote(initialNote);\r\n    while(stepNumber>11){\r\n        stepNumber=stepNumber-12;\r\n    }\r\n    return noteCircle[stepNumber];\r\n}\r\n\r\nfunction findNote(note){\r\n    //Given the notation of a note, returns its index in the note circle\r\n    note = note.toUpperCase();\r\n    let noteIndex;\r\n    try{\r\n        noteIndex = noteCircle.indexOf(note);\r\n    }catch(err){\r\n        console.log(\"Note not found in circle\");\r\n    }\r\n    return noteIndex\r\n}\r\n\r\nfunction disableNodes(nodes){\r\n  for(var i=0;i<nodes.length;i++){\r\n    nodes[i].setAttribute(\"disabled\", \"disabled\");\r\n  }\r\n}\r\n\r\nfunction enableNodes(nodes){\r\n  for(var i=0;i<nodes.length;i++){\r\n    nodes[i].removeAttribute(\"disabled\");\r\n  }\r\n}\r\n\r\nfunction setScoreLocal(option,score,time,fretNumber){\r\n  scoreLocalExists();\r\n  time = parseInt(time);\r\n  var scoreboard = getScoreLocal(option);\r\n  scoreboard.push([score,time,fretNumber]);\r\n  scoreboard.sort(scoreSorter);\r\n  scoreboard = JSON.stringify(scoreboard);\r\n  localStorage.setItem(option,scoreboard);\r\n}\r\n\r\nfunction getScoreLocal(option){\r\n  scoreLocalExists();\r\n  return JSON.parse(localStorage.getItem(option))\r\n}\r\n\r\nfunction orderScores(){\r\n  console.log(\"Something\");\r\n  var noteScore = getScoreLocal(\"note\");\r\n  var questionFretScore = getScoreLocal(\"questionFret\");\r\n  noteScore.sort(scoreSorter);\r\n  questionFretScore.sort(scoreSorter);\r\n  noteScore = JSON.stringify(noteScore);\r\n  questionFretScore = JSON.stringify(questionFretScore);\r\n  localStorage.setItem(\"note\",noteScore);\r\n  localStorage.setItem(\"questionFret\", questionFretScore);\r\n}\r\n\r\nfunction scoreSorter(score1, score2){\r\n  score1 = ((score1[0] * 1.1 * score1[1])/score1[2]);\r\n  score2 = ((score2[0] * 1.1 * score2[1])/score2[2]);\r\n  if (score1>score2){\r\n    return -1;\r\n  }else if (score1<score2){\r\n    return 1;\r\n  }else{\r\n    return 0;\r\n  }\r\n}\r\n\r\nfunction scoreLocalExists(){\r\n  if (!JSON.parse(localStorage.getItem(\"questionFret\"))){\r\n    localStorage.setItem(\"questionFret\",JSON.stringify([]));\r\n  }\r\n  if (!JSON.parse(localStorage.getItem(\"note\"))){\r\n    localStorage.setItem(\"note\",JSON.stringify([]));\r\n  }\r\n}\r\n\r\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}