{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tuningChange","event","target","value","split","tunedNote","newTuning","state","tuning","concat","setState","stringNumberChange","newWireNumber","parseInt","wireNumber","fretNumberChange","newFretNumber","fretNumber","activeWiresChange","newActiveWires","activeWires","className","checked","timeRemainingChange","newTimeRemaining","timeRemaining","currentQuestionChange","question","currentQuestion","timeRemainingSet","time","currentGameModeSet","mode","currentGameMode","scoreboardSet","scoreboard","updateScoreLocalstorage","JSON","parse","localStorage","getItem","timePass","asyncToGenerator","regenerator_default","a","mark","_callee","totalTime","optionNodes","inGameNodes","i","wrap","_context","prev","next","console","log","disableNodes","document","querySelector","querySelectorAll","sleep","length","classList","remove","enableNodes","saveScore","resetScore","orderScores","stop","ms","Promise","resolve","setTimeout","checkAnswer","contains","getAttribute","winScore","loseScore","activeFrets","randomFret","Math","floor","random","add","selectQuestionFret","newScore","currentScore","option","score","scoreLocalExists","getScoreLocal","push","sort","scoreSorter","stringify","setItem","setScoreLocal","innerHTML","react_default","createElement","class","renderBoard","renderOptions","renderScores","App_Board","numberOfFrets","numberOfWires","currentTuning","App_Options","App_Scores","React","Component","Board","_this2","wireTuning","activeToggle","fretNodes","_this3","visibilityClass","notesUsed","calculateNote","map","note","onClick","wires","renderWire","Fragment","_this4","selectNoteButtons","noteCircle","generateSelectNoteButtons","Options","App_TuningSelector","App_StringNumberSelector","App_FretNumberSelector","App_GameStartButtons","App_TimeSelector","TuningSelector","_this5","allNotes","notes","totalDropdowns","elements","index","selected","onChange","defaultValue","type","defaultChecked","generateTuningDropdowns","StringNumberSelector","min","max","FretNumberSelector","GameStartButtons","_this6","selectQuestionFretStart","bind","assertThisInitialized","selectNoteStart","activeButtons","TimeSelector","Scores","arrayinfo","renderScore","scoreArray","getScores","initialNote","arguments","undefined","stepNumber","noteIndex","toUpperCase","indexOf","err","findNote","nodes","setAttribute","removeAttribute","noteScore","questionFretScore","score1","score2","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6cec3701.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './style.css'\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      tuning:[\"E\",\"B\",\"G\",\"D\",\"A\",\"E\"],\n      wireNumber:6,\n      fretNumber:12,\n      timeRemaining : 2,\n      activeWires:[true,true,true,true,true,true,true,true,true],\n      currentQuestion: null,\n      currentScore: null,\n      currentGameMode: null,\n      scoreboard: []\n      };\n  }\n\n  render(){\n    return (\n      <div class=\"game\">\n          <div class=\"board\">\n            <div class=\"gameInfo\">\n              <div class=\"question\">Point to the fret: {this.state.currentQuestion}</div>\n              <div class=\"score\">SCORE: {this.state.currentScore}</div>\n              <div class=\"timeRemaining\">TIME: {this.state.timeRemaining}</div>\n            </div>\n              {this.renderBoard()}\n          </div>\n          <div class=\"options\">\n             {this.renderOptions()}\n          </div>\n          <div class=\"scores\">\n            {this.renderScores()}\n          </div>\n      </div>\n    );\n  }\n\n  renderBoard(){\n    return <Board\n      numberOfFrets = {this.state.fretNumber}\n      numberOfWires = {this.state.wireNumber}\n      currentTuning = {this.state.tuning}\n      activeWires = {this.state.activeWires}\n      checkAnswer = {this.checkAnswer}\n    />\n  }\n\n  renderOptions(){\n    return <Options\n      wireNumber={this.state.wireNumber} \n      currentTuning = {this.state.tuning}\n      tuningChange={this.tuningChange}\n      stringNumberChange={this.stringNumberChange}\n      fretNumberChange={this.fretNumberChange}\n      activeWires = {this.state.activeWires}\n      activeWiresChange = {this.activeWiresChange}\n      currentQuestionChange = {this.currentQuestionChange}\n      winScore = {this.winScore}\n      loseScore = {this.loseScore}\n      selectQuestionFret = {this.selectQuestionFret}\n      currentQuestion = {this.state.currentQuestion}\n      timeRemainingChange = {this.timeRemainingChange}\n      timePass = {this.timePass}\n      currentGameModeSet = {this.currentGameModeSet}\n    />\n  }\n\n  renderScores(){\n    return <Scores \n    scoreboardSet = {this.scoreboardSet}\n    scoreboard = {this.state.scoreboard}\n    updateScoreLocalstorage = {this.updateScoreLocalstorage}\n    />\n  }\n  /* React.Component doesn't auto bind methods to itself. You need to bind them yourself */\n  /* Option A: Bind them in the constructor, as in this.tuningChange = this.tuningChange.bind(this); in the constructor of this class*/\n  /* Option B: when passed as a prop, pass it as this.tuningChange.bind(this) */\n  /* Option C: What is displayed here, define the function as an event that executes a function ¿?*/\n  tuningChange = event => {\n    var target = event.target.value.split(\",\")[0];\n    var tunedNote = event.target.value.split(\",\")[1];\n    var newTuning = this.state.tuning.concat();\n    newTuning[target] = tunedNote;\n    this.setState({\n        tuning : newTuning\n    })\n  }\n\n  stringNumberChange = event => {\n    var newWireNumber = parseInt(event.target.value);\n    this.setState({\n      wireNumber : newWireNumber\n    })\n  }\n  fretNumberChange = event => {\n    var newFretNumber = parseInt(event.target.value);\n    this.setState({\n      fretNumber : newFretNumber\n    })\n  }\n  activeWiresChange = event => {\n    var newActiveWires = this.state.activeWires.concat();\n    newActiveWires[event.target.className] = event.target.checked;\n    this.setState({\n      activeWires : newActiveWires\n    })\n  }\n  \n  timeRemainingChange = event =>{\n    var newTimeRemaining = parseInt(event.target.value);\n    this.setState({\n      timeRemaining : newTimeRemaining\n    })\n  }\n  currentQuestionChange = (question) => {\n    this.setState({\n      currentQuestion : question\n    })\n  }\n\n  timeRemainingSet = (time) => {\n    this.setState({\n      timeRemaining : time\n    })\n  }\n  \n  currentGameModeSet = (mode) => {\n    this.setState({\n      currentGameMode : mode\n    })\n  }\n  scoreboardSet = (scoreboard) => {\n    this.setState({\n      scoreboard : scoreboard\n    })\n  }\n\n  updateScoreLocalstorage = () => {\n    var scoreboard = [];\n    scoreboard[0] = JSON.parse(localStorage.getItem(\"note\"));\n    scoreboard[1] = JSON.parse(localStorage.getItem(\"questionFret\"));\n    this.scoreboardSet(scoreboard);\n  }\n\n////////TODO: Have to associate the ending of the countdown to saving the score\n  timePass = async () => {\n    var totalTime = this.state.timeRemaining;\n    console.log(\"Game Start\");\n    var optionNodes = document.querySelector(\".options\").querySelectorAll(\"select, input\");\n    disableNodes(optionNodes);\n    while(this.state.timeRemaining > 0){\n      await this.sleep(1000);\n      this.timeRemainingSet(this.state.timeRemaining-1);\n      console.log(\"Time tick\");\n    }\n      console.log(\"Time end\");\n      var fretNumber = document.querySelectorAll(\".inGame\").length;\n      console.log(fretNumber);\n      document.querySelector(\".questionNode\").classList.remove(\"questionNode\");\n      var inGameNodes = document.querySelectorAll(\".inGame\");\n      for (var i=0;i<inGameNodes.length;i++){\n        inGameNodes[i].classList.remove(\"inGame\");\n      }\n      enableNodes(optionNodes);\n      this.saveScore(this.state.currentGameMode, fretNumber,totalTime);\n      this.currentGameModeSet(null);\n      this.timeRemainingSet(document.querySelector(\".timeSelector\").value);\n      this.resetScore();\n      orderScores();\n  }\n\n  sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  checkAnswer = event => {\n    if (!event.target.classList.contains(\"inGame\")){\n     return\n    }\n\n    if (this.state.currentGameMode == \"note\"){\n      var question = this.state.currentQuestion.split(\" \")[0];\n    }else{\n      var question = this.state.currentQuestion;\n    }\n\n    if(event.target.getAttribute(\"note\") == question){\n     this.winScore();\n    }else{\n      this.loseScore();\n    }\n\n    document.querySelector(\".questionNode\").classList.remove(\"questionNode\");\n    var activeFrets = document.querySelector(\"div.fretBoard\").querySelectorAll(\"div.wire.visible>div.fret\");\n    var randomFret = activeFrets[Math.floor(Math.random() * activeFrets.length)];\n    randomFret.classList.add('questionNode');\n    this.currentQuestionChange(randomFret.getAttribute(\"note\"));\n  }\n  \n  selectQuestionFret = () =>{\n    var activeFrets = document.querySelector(\"div.fretBoard\").querySelectorAll(\"div.wire.visible>div.fret\");\n        //Initial question fret\n        var randomFret = activeFrets[Math.floor(Math.random() * activeFrets.length)];\n        randomFret.classList.add('questionNode');\n        this.currentQuestionChange(randomFret.getAttribute(\"note\"));\n  }\n\n  winScore = () =>{\n    var newScore = this.state.currentScore + 100;\n    this.setState({\n      currentScore : newScore\n    })\n  }\n  loseScore = () =>{\n    var newScore = this.state.currentScore - 100;\n    this.setState({\n      currentScore : newScore\n    })\n  }\n  resetScore = () =>{\n    this.setState({\n      currentScore : 0\n    })\n  }\n  saveScore = (mode, fretNumber, totalTime) =>{\n    var points = parseInt(document.querySelector(\".score\").innerHTML) || 0;\n    totalTime = parseInt(totalTime);\n    setScoreLocal(mode, points,fretNumber,totalTime);\n    this.updateScoreLocalstorage();\n  }\n}\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props);\n    this.checkAnswer = this.props.checkAnswer;\n  }\n\n  renderWire(numberOfFrets, wireTuning, activeToggle, wireNumber){\n    var visibilityClass = activeToggle ? \"visible\" : \"hidden\";\n    var notesUsed = [];\n    var fretNodes = [];\n\n    for (var i=0;i<numberOfFrets;i++){\n      notesUsed[i] = calculateNote(wireTuning,i);\n    }\n    fretNodes = notesUsed.map((note) =>\n      <div class=\"fret\" note={note+\" \"+wireNumber} onClick={this.checkAnswer}>{note}</div>\n    );\n    return(\n      <div className = {\"wire \"+ visibilityClass} >\n        {fretNodes}\n      </div>\n    )\n  }\n\n  renderBoard(numberOfFrets, numberOfWires, tuning){\n    var wires = [];\n    for (var i=0;i<numberOfWires;i++){\n      wires[i] = this.renderWire(numberOfFrets,tuning[i],this.props.activeWires[i],i);\n    }\n    return(\n     <>{wires}</>\n    )\n  }\n\n  generateSelectNoteButtons(){\n    var selectNoteButtons = noteCircle.map((note) =>\n    <button class =\"selectNoteButtons\" note={note} onClick={this.checkAnswer}>{note}</button>\n      )\n    return(\n      <div class=\"selectNoteDiv\">\n        {selectNoteButtons}\n      </div>\n    )\n  }\n\n  render(){\n    return(\n      <>\n      <div class=\"fretBoard\">\n       {this.renderBoard(this.props.numberOfFrets, this.props.numberOfWires,this.props.currentTuning)}\n      </div>\n      {this.generateSelectNoteButtons()}\n      </>\n    )\n  }\n}\n\nclass Options extends React.Component{\n  render(){\n    return (\n      <>\n        <TuningSelector\n          wireNumber = {this.props.wireNumber}\n          tuningChange = {this.props.tuningChange}\n          currentTuning = {this.props.currentTuning}\n          activeWires = {this.props.activeWires}\n          activeWiresChange = {this.props.activeWiresChange}\n        />\n        <StringNumberSelector\n          stringNumberChange = {this.props.stringNumberChange}\n        />\n        <FretNumberSelector\n          fretNumberChange = {this.props.fretNumberChange}\n        />\n        <GameStartButtons\n          currentQuestionChange = {this.props.currentQuestionChange}\n          currentQuestion = {this.props.currentQuestion}\n          winScore = {this.props.winScore}\n          loseScore = {this.props.loseScore}\n          timePass = {this.props.timePass}\n          selectQuestionFret = {this.props.selectQuestionFret}\n          currentGameModeSet = {this.props.currentGameModeSet}\n        />\n        <TimeSelector\n          timeRemainingChange = {this.props.timeRemainingChange}\n        />\n      </>\n      )\n  }\n}\n\nclass TuningSelector extends React.Component{\n    //Maps from the notes array to make 12 <option> nodes, then from that to make the desired amount of <select> nodes with <option> in them\n    generateTuningDropdowns(wireNumber){\n      var allNotes = [];\n      for(var i=0;i<wireNumber;i++){\n        allNotes[i] = noteCircle.map((notes)=>\n         <option value = {i+\",\"+notes}>{notes}</option>\n        )\n      }\n      var totalDropdowns = allNotes.map((elements,index)=>\n        <>\n        <select className={this.props.activeWires[index] ? \"visible\" : \"hidden\"} value={this.selected} onChange={this.props.tuningChange} defaultValue={index+\",\"+this.props.currentTuning[index]}>\n          {elements}\n        </select>\n        <input type=\"checkbox\" defaultChecked={this.props.activeWires[index]} className={index} onChange={this.props.activeWiresChange}></input>\n        </>\n      )\n      return(\n        <div class=\"tuningOptions\">\n          {totalDropdowns}\n        </div>\n      )\n    }\n\n    render(){\n      return(\n        <>\n          {this.generateTuningDropdowns(this.props.wireNumber)}\n        </>\n      )\n    }\n}\n\nclass StringNumberSelector extends React.Component{\n  \n  render(){\n    return(\n      <>\n      <div class=\"stringNumberSelector\">\n        <input type=\"number\" min=\"1\" max=\"6\" defaultValue=\"6\" onChange={this.props.stringNumberChange}/>\n        <span>String Number</span>\n      </div>\n      </>\n    )\n  }\n}\n\nclass FretNumberSelector extends React.Component{\n  \n  render(){\n    return(\n      <>\n      <div class=\"fretNumberSelector\">\n        <input type=\"number\" min=\"1\" max=\"12\" defaultValue=\"12\" onChange={this.props.fretNumberChange}/>\n        <span>Fret Number</span>\n      </div>\n      </>\n    )\n  }\n}\n\nclass GameStartButtons extends React.Component{\n  constructor(props){\n    super(props);\n    this.selectQuestionFretStart = this.selectQuestionFretStart.bind(this);\n    this.selectNoteStart = this.selectNoteStart.bind(this);\n    this.timePass = this.props.timePass.bind(this);\n    this.selectQuestionFret = this.props.selectQuestionFret;\n    this.currentGameModeSet = this.props.currentGameModeSet;\n  }\n\n  selectQuestionFretStart(){//Function that actually fires from the button press\n    this.currentGameModeSet(\"questionFret\");\n    this.selectQuestionFret();\n    this.timePass();\n    var activeFrets = document.querySelector(\"div.fretBoard\").querySelectorAll(\"div.wire.visible>div.fret\");\n    for (var i=0;i<activeFrets.length;i++){\n      activeFrets[i].className += \" inGame\";\n    }\n  }\n\n  selectNoteStart(){\n    this.currentGameModeSet(\"note\");\n    this.selectQuestionFret();\n    this.timePass();\n    var activeButtons = document.querySelectorAll(\"button.selectNoteButtons\");\n    console.log(activeButtons);\n    for(var i=0;i<activeButtons.length;i++){\n      activeButtons[i].className +=\" inGame\";\n    }\n  }\n\n  //Two buttons, one for finding note in string, other for identifying marked note.\n  //Should fire two different functions ¿? Each doing its own thing, ultimately writing into Scores\n  //Game Start\n  //Option menu is locked\n  //Button turns into cancel ¿?\n  //prompt is generated (F key in wire 3, what is the note in the sixth fret of first wire?)\n  //Time starts running (set an option for time?)\n  //Note circle or fretboard becomes clickable as pertinent\n  //Success or failure changes score, generates another prompt\n  //When time runs out prompt disappears, score is logged, things return to normal\n  render(){\n    return(\n      <>\n      <input type=\"button\" value=\"Question Fret\" class=\"questionFretButton gameStartButton\" onClick={this.selectQuestionFretStart}/>\n      <input type=\"button\" value=\"Note\" class=\"noteButton gameStartButton\" onClick={this.selectNoteStart}/>\n      </>\n    )\n  }\n}\n\nclass TimeSelector extends React.Component{\n  render(){\n    return(\n      <><div class=\"timeSelectorDiv\">\n      <select class=\"timeSelector\" onChange={this.props.timeRemainingChange}>\n        <option value =\"3\">3</option>\n        <option value=\"30\">30</option>\n        <option value=\"45\">45</option>\n        <option value=\"60\" selected>60</option>\n        <option value=\"90\">90</option>\n        <option value=\"120\">120</option>\n      </select>\n      <span>Time</span>\n      </div>\n      </>\n    )\n  }\n}\n\n\nclass Scores extends React.Component{\n\n  getScores(arrayinfo){\n    if (typeof arrayinfo !== 'undefined' && arrayinfo != null){\n      return(\n        <>\n          {this.renderScore(arrayinfo[0])}\n          {this.renderScore(arrayinfo[1])}\n          {this.renderScore(arrayinfo[2])}\n        </>\n      ) \n    }else{\n      console.log(\"Happens\");\n      return(<div>No score</div>)\n    }\n  }\n\n  renderScore(scoreArray){\n    if (typeof scoreArray!=='undefined'){\n      return(\n        <div>{scoreArray[0]} points with {scoreArray[1]} frets in {scoreArray[2]} seconds</div>\n      )\n    }else{\n      return(\n        <div>Empty</div>\n      )\n    }\n  }\n\n  componentDidMount(){\n    this.props.updateScoreLocalstorage()\n  }\n\n  render(){\n    return(\n      <>\n        <div class=\"ranking\">\n        \n          <div class=\"noteScoreBoard\"><span class=\"scoreHeader\">noteScoreBoard</span>{this.getScores(this.props.scoreboard[0])}</div>\n        \n          <div class=\"questionFretScoreBoard\"><span class=\"scoreHeader\">questionFretScoreBoard</span>{this.getScores(this.props.scoreboard[1])}</div>\n        </div>\n      </>\n    )\n  }\n}\nconst noteCircle = [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"];\n\nfunction calculateNote(initialNote=\"A\", stepNumber){\n    //Given a initial note and a number of steps, it returns the note X steps from the initial note.\n    initialNote = initialNote.toUpperCase();\n    stepNumber = stepNumber + findNote(initialNote);\n    while(stepNumber>11){\n        stepNumber=stepNumber-12;\n    }\n    return noteCircle[stepNumber];\n}\n\nfunction findNote(note){\n    //Given the notation of a note, returns its index in the note circle\n    note = note.toUpperCase();\n    let noteIndex;\n    try{\n        noteIndex = noteCircle.indexOf(note);\n    }catch(err){\n        console.log(\"Note not found in circle\");\n    }\n    return noteIndex\n}\n\nfunction disableNodes(nodes){\n  for(var i=0;i<nodes.length;i++){\n    nodes[i].setAttribute(\"disabled\", \"disabled\");\n  }\n}\n\nfunction enableNodes(nodes){\n  for(var i=0;i<nodes.length;i++){\n    nodes[i].removeAttribute(\"disabled\");\n  }\n}\n\nfunction setScoreLocal(option,score,time,fretNumber){\n  scoreLocalExists();\n  time = parseInt(time);\n  var scoreboard = getScoreLocal(option);\n  scoreboard.push([score,time,fretNumber]);\n  scoreboard.sort(scoreSorter);\n  scoreboard = JSON.stringify(scoreboard);\n  localStorage.setItem(option,scoreboard);\n}\n\nfunction getScoreLocal(option){\n  scoreLocalExists();\n  return JSON.parse(localStorage.getItem(option))\n}\n\nfunction orderScores(){\n  console.log(\"Something\");\n  var noteScore = getScoreLocal(\"note\");\n  var questionFretScore = getScoreLocal(\"questionFret\");\n  noteScore.sort(scoreSorter);\n  questionFretScore.sort(scoreSorter);\n  noteScore = JSON.stringify(noteScore);\n  questionFretScore = JSON.stringify(questionFretScore);\n  localStorage.setItem(\"note\",noteScore);\n  localStorage.setItem(\"questionFret\", questionFretScore);\n}\n\nfunction scoreSorter(score1, score2){\n  score1 = ((score1[0] * 1.1 * score1[1])/score1[2]);\n  score2 = ((score2[0] * 1.1 * score2[1])/score2[2]);\n  if (score1>score2){\n    return -1;\n  }else if (score1<score2){\n    return 1;\n  }else{\n    return 0;\n  }\n}\n\nfunction scoreLocalExists(){\n  if (!JSON.parse(localStorage.getItem(\"questionFret\"))){\n    localStorage.setItem(\"questionFret\",JSON.stringify([]));\n  }\n  if (!JSON.parse(localStorage.getItem(\"note\"))){\n    localStorage.setItem(\"note\",JSON.stringify([]));\n  }\n}\n\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}